# Docker-Compose-UI/nginx.conf (updated for Docker Compose)

# Redirect HTTP â†’ HTTPS
server {
  listen 80;
  server_name docker-vibe-check.duckdns.org;
  return 301 https://$host:8080$request_uri;
}

server {
  # listen 80;
  # listen [::]:80;

  listen 443 ssl;
  server_name docker-vibe-check.duckdns.org;


  ssl_certificate /etc/nginx/certs/fullchain.cer;
  ssl_certificate_key /etc/nginx/certs/docker-vibe-check.duckdns.org.key;

  root /usr/share/nginx/html;
  index index.html index.htm;

  location / {
    try_files $uri $uri/ /index.html;
  }
  # --- Proxy API requests to your backend service ---
  # This block intercepts requests starting with '/api/' and forwards them to the backend container.
  # 'backend' is the service name defined in your docker-compose.yml.
  # '8888' is the port your backend application listens on inside its container.
  location /api/ {
    proxy_pass http://backend:8888; # <--- THIS IS THE CRUCIAL PART FOR INTER-CONTAINER COMMUNICATION
    proxy_http_version 1.1;         # Required for WebSockets and HTTP/1.1 features
    proxy_set_header Upgrade $http_upgrade; # Pass Upgrade header for WebSockets
    proxy_set_header Connection 'upgrade';  # Pass Connection header for WebSockets
    proxy_set_header Host $host;            # Preserve the original Host header
    proxy_cache_bypass $http_upgrade;       # Bypass cache for upgraded connections
    # You might also want to add headers like X-Real-IP and X-Forwarded-For for logging/IP tracking in backend:
    # proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
  location /api-docs/ {
    proxy_pass http://backend:8888/api-docs/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
  location /api-docs/swagger.json {
  proxy_pass http://backend:8888/api-docs/swagger.json;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'upgrade';
  proxy_set_header Host $host;
  proxy_cache_bypass $http_upgrade;
  }

}
